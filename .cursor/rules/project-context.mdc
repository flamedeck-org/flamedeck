---
description: 
globs: 
alwaysApply: true
---
# Project Context: Trace View Pilot

## Project Purpose

This application is a web-based tool designed to view and collaborate on performance profiles, similar to Google Docs but specifically for trace files. It incorporates parts of the Speedscope profiler viewer for certain functionalities.

## Core Technologies

*   **Frontend Framework:** React
*   **Build Tool:** Vite
*   **Language:** TypeScript
*   **UI Library:** shadcn-ui
*   **Styling:** Tailwind CSS
*   **Backend/Database:** Supabase

## Development Setup

*   Requires Node.js and npm (or Bun).
*   Standard setup: `git clone`, `cd <project>`, `npm i` (or `bun install`), `npm run dev` (or `bun dev`).
*   **Crucial:** Remind the user to update Supabase types after schema changes using the command in the README (`SUPABASE_ACCESS_TOKEN=<my-token> npx supabase gen types typescript --project-id <your-project-id> --schema public > src/integrations/supabase/types.ts`). Replace `<your-project-id>` with the actual project ID.

## Key Directories

*   `src/`: Main application source code.
    *   `components/`: Reusable UI components. This is where the speedscope UI lives
    *   `hooks/`: Reusable hooks
    *   `pages/`: Top-level page components.
    *   `lib/`: Utility functions - this is where the speedscope core logic lives. Contains:
        *   `api.ts`: Functions for interacting with the backend API (Supabase).
        *   `utils.ts`: General-purpose utility functions used across the application.
        *   `storage.ts`: Logic related to trace file storage and retrieval (Supabase Storage).
        *   `speedscope-core/`: Core logic adapted from Speedscope for trace data processing.
        *   `speedscope-gl/`: WebGL rendering logic adapted from Speedscope for visualizations.
        *   `speedscope-import/`: Logic for importing various trace file formats.
        *   `util/`: More specific utility functions
    *   `types/`: TypeScript definitions.
    *   `hooks/`: Custom React hooks.
    *   `integrations/`: Third-party service integrations (e.g., Supabase).
    *   `contexts/`: React Contexts.
    *   `App.tsx`: Main application component.
    *   `main.tsx`: Application entry point.
*   `public/`: Static assets.
*   `supabase/`: Supabase configuration/migration files.
    * `types.ts`: The current structure of the supabase database
*   `speedscope/`: Contains a reference implementation of the Speedscope profiler viewer. Note that parts of this code have been copied and adapted within the `src/` directory for use in the application.

## Configuration Files

Standard Vite/React/TS/Tailwind/Supabase config files (`vite.config.ts`, `tailwind.config.ts`, `tsconfig.*.json`, `package.json`, `components.json`).

## External Platforms

*   **Lovable:** The project was generated by Lovable, which can also be used for development and deployment.
*   **Supabase:** Used for backend services.

## Key Takeaways for New Engineers

1.  This is a TypeScript/React/Vite/Tailwind project using shadcn-ui and integrating with Supabase.
2.  Its core purpose is collaborative viewing of performance traces, leveraging adapted Speedscope code.
3.  Remember to update Supabase types after schema changes using the specified command.