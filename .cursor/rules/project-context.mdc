---
description: 
globs: 
alwaysApply: true
---
# Project Context: Trace View Pilot

## Project Purpose

This project is an nx monorepo for a web-based tool designed to view and collaborate on performance profiles, similar to Google Docs but specifically for trace files. It incorporates parts of the Speedscope profiler viewer for certain functionalities.

## Core Technologies

*   **Frontend Framework:** React
*   **Build Tool:** Vite
*   **Language:** TypeScript
*   **UI Library:** shadcn-ui
*   **Styling:** Tailwind CSS
*   **Backend/Database:** Supabase

## Development Setup

*   Requires Node.js and yarn
*   Standard setup: `git clone`, `cd <project>`, `yarn` & `yarn dev`.
*   **Crucial:** Remind the user to update Supabase types after schema changes using the command in the README (`SUPABASE_ACCESS_TOKEN=<my-token> yarn supabase gen types typescript --project-id jczffinsulwdzhgzggcj --schema public > apps/client/src/integrations/supabase/types.ts`). Replace `<your-project-id>` with the actual project ID.

## Packages

### `supabase`

The root supabase folder contains database migrations as well as edge functions. Right now the following edge functions exist:

* `/subabase/functions/api-upload-trace`: Allows users with an API key to upload a trace, which is converted to a speescope format, compressed, and stored in the backend. It runs on Deno and uses shared logic from `packages/shared-importer`.

### `apps/client`

This is the frontend client for the trace viewer, which allows for uploading, organizing, viewing, and commenting on traces, among other things.

*   `src/`: Main application source code.
    *   `components/`: Reusable UI components. This is where the speedscope UI lives
    *   `hooks/`: Reusable hooks
    *   `pages/`: Top-level page components.
    *   `lib/`: Utility functions - this is where the speedscope core logic lives. Contains:
        *   `api.ts`: Functions for interacting with the backend API (Supabase).
        *   `utils.ts`: General-purpose utility functions used across the application.
        *   `storage.ts`: Logic related to trace file storage and retrieval (Supabase Storage).
        *   `speedscope-core/`: Core logic adapted from Speedscope for trace data processing.
        *   `speedscope-gl/`: WebGL rendering logic adapted from Speedscope for visualizations.
        *   `speedscope-import/`: Logic for importing various trace file formats.
        *   `util/`: More specific utility functions
    *   `types/`: TypeScript definitions.
    *   `hooks/`: Custom React hooks.
    *   `integrations/`: Third-party service integrations (e.g., Supabase).
        * `supabase/types.ts`: The generated database schema from Supabase
    *   `contexts/`: React Contexts.
    *   `App.tsx`: Main application component.
    *   `main.tsx`: Application entry point.
*   `public/`: Static assets.

Standard Vite/React/TS/Tailwind/Supabase config files (`vite.config.ts`, `tailwind.config.ts`, `tsconfig.*.json`, `package.json`, `components.json`) also live in `apps/client`.

### `packages/shared-importer`

We share the core logic of parsing a profile from a file / array buffer and converting it to the speedscope format between the client and a supabase edge function. To do this we ensure that the code is simple typescript and does not import from any external modules (since Vite and Deno handle module resolution differently).

## Key Takeaways for New Engineers

1. We use NX for managing the client monorepo
1. The client web app is a TypeScript/React/Vite/Tailwind project using shadcn-ui and integrating with Supabase.
1. Its core purpose is collaborative viewing of performance traces, leveraging adapted Speedscope code.
1. Remember to update Supabase types after schema changes using the specified command.