# .github/workflows/release-cli.yml
name: Release Flamedeck CLI

# Controls when the workflow will run
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+-cli' # Trigger on tags like v0.1.0-cli, v1.2.3-cli

permissions:
  contents: write # Needed to create releases

jobs:
  build-linux:
    name: Build Linux (x86_64)
    runs-on: ubuntu-latest
    outputs:
      artifact_name: ${{ steps.vars.outputs.artifact_name }}
      binary_path: ${{ steps.vars.outputs.binary_path }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # Add cross-compilation targets
      - name: Add target
        run: rustup target add x86_64-unknown-linux-gnu

      # Build for Linux x86_64
      - name: Build
        run: cargo build --release --target x86_64-unknown-linux-gnu
        working-directory: ./cli-rust

      # Set artifact vars
      - name: Set artifact vars
        id: vars
        run: |
          echo "artifact_name=flamedeck-linux-x64" >> $GITHUB_OUTPUT
          echo "binary_path=cli-rust/target/x86_64-unknown-linux-gnu/release/flamedeck" >> $GITHUB_OUTPUT

      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.vars.outputs.artifact_name }}
          path: ${{ steps.vars.outputs.binary_path }}

  build-macos:
    name: Build macOS (x86_64 + ARM64)
    runs-on: macos-latest # Use native macOS runner
    outputs:
      artifact_name_x64: ${{ steps.vars.outputs.artifact_name_x64 }}
      binary_path_x64: ${{ steps.vars.outputs.binary_path_x64 }}
      artifact_name_arm64: ${{ steps.vars.outputs.artifact_name_arm64 }}
      binary_path_arm64: ${{ steps.vars.outputs.binary_path_arm64 }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # Add cross-compilation targets
      - name: Add targets
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      # Build for macOS x86_64
      - name: Build x86_64
        run: cargo build --release --target x86_64-apple-darwin
        working-directory: ./cli-rust

      # Build for macOS Apple Silicon (aarch64)
      - name: Build arm64
        run: cargo build --release --target aarch64-apple-darwin
        working-directory: ./cli-rust

      # Set artifact vars
      - name: Set artifact vars
        id: vars
        run: |
          echo "artifact_name_x64=flamedeck-macos-x64" >> $GITHUB_OUTPUT
          echo "binary_path_x64=cli-rust/target/x86_64-apple-darwin/release/flamedeck" >> $GITHUB_OUTPUT
          echo "artifact_name_arm64=flamedeck-macos-arm64" >> $GITHUB_OUTPUT
          echo "binary_path_arm64=cli-rust/target/aarch64-apple-darwin/release/flamedeck" >> $GITHUB_OUTPUT

      # Upload x64 artifact
      - name: Upload x64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.vars.outputs.artifact_name_x64 }}
          path: ${{ steps.vars.outputs.binary_path_x64 }}

      # Upload arm64 artifact
      - name: Upload arm64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.vars.outputs.artifact_name_arm64 }}
          path: ${{ steps.vars.outputs.binary_path_arm64 }}

  build-windows:
    name: Build Windows (x86_64)
    runs-on: windows-latest # Use native Windows runner
    outputs:
      artifact_name: ${{ steps.vars.outputs.artifact_name }}
      binary_path: ${{ steps.vars.outputs.binary_path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # Add cross-compilation targets
      - name: Add target
        run: rustup target add x86_64-pc-windows-msvc

      # Build for Windows x86_64
      - name: Build
        run: cargo build --release --target x86_64-pc-windows-msvc
        working-directory: ./cli-rust

      # Set artifact vars
      - name: Set artifact vars
        id: vars
        run: |
          echo "artifact_name=flamedeck-win-x64.exe" >> $env:GITHUB_OUTPUT
          echo "binary_path=cli-rust/target/x86_64-pc-windows-msvc/release/flamedeck.exe" >> $env:GITHUB_OUTPUT

      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.vars.outputs.artifact_name }}
          path: ${{ steps.vars.outputs.binary_path }}

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows] # Wait for builds
    steps:
      # Download all build artifacts
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Download all artifacts to a directory named 'artifacts'
      
      # Rename files for unique asset names
      - name: Rename binaries for release
        run: |
          mkdir release-assets
          mv artifacts/flamedeck-linux-x64/flamedeck release-assets/flamedeck-linux-x64
          mv artifacts/flamedeck-macos-x64/flamedeck release-assets/flamedeck-macos-x64
          mv artifacts/flamedeck-macos-arm64/flamedeck release-assets/flamedeck-macos-arm64
          mv artifacts/flamedeck-win-x64.exe/flamedeck.exe release-assets/flamedeck-win-x64.exe
      
      # List files (for debugging)
      - name: List final assets
        run: ls -l release-assets

      # Create GitHub Release and Upload Binaries
      - name: Create Release and Upload Binaries
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: CLI Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          # Use a glob pattern to upload all files from the staging directory
          files: release-assets/* 