# .github/workflows/release-cli.yml
name: Release Rust CLI Binaries

# Controls when the workflow will run
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+-cli' # Trigger on tags like v0.1.0-cli, v1.2.3-cli

permissions:
  contents: write # Needed to create releases

jobs:
  build-and-release:
    name: Build and Release Rust CLI
    # We might need separate runners later if cross-compilation fails, 
    # but let's try ubuntu first with added targets.
    runs-on: ubuntu-latest 

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # Add cross-compilation targets
      - name: Add targets
        run: |
          rustup target add x86_64-unknown-linux-gnu
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-pc-windows-msvc 
          # May need linker setup for cross-compiling, especially for windows-msvc
          # sudo apt-get update && sudo apt-get install -y mingw-w64 # Example for windows

      # Build for Linux x86_64
      - name: Build for Linux (x86_64)
        run: cargo build --release --target x86_64-unknown-linux-gnu
        working-directory: ./cli-rust

      # Build for macOS x86_64
      - name: Build for macOS (x86_64)
        run: cargo build --release --target x86_64-apple-darwin
        working-directory: ./cli-rust

      # Build for macOS Apple Silicon (aarch64)
      - name: Build for macOS (ARM64)
        run: cargo build --release --target aarch64-apple-darwin
        working-directory: ./cli-rust

      # Build for Windows x86_64
      - name: Build for Windows (x86_64)
        run: cargo build --release --target x86_64-pc-windows-msvc
        working-directory: ./cli-rust

      # Rename binaries for consistency
      - name: Rename Binaries
        run: |
          cd cli-rust/target
          mv x86_64-unknown-linux-gnu/release/cli-rust ./flamedeck-upload-linux-x64
          mv x86_64-apple-darwin/release/cli-rust ./flamedeck-upload-macos-x64
          mv aarch64-apple-darwin/release/cli-rust ./flamedeck-upload-macos-arm64
          mv x86_64-pc-windows-msvc/release/cli-rust.exe ./flamedeck-upload-win-x64.exe
          cd ../..

      # Create GitHub Release and Upload Assets
      - name: Create Release and Upload Binaries
        uses: softprops/action-gh-release@v2
        with:
          # The GITHUB_TOKEN is automatically available to the workflow
          # token: ${{ secrets.GITHUB_TOKEN }} # Usually not needed to specify explicitly
          tag_name: ${{ github.ref_name }} # Use the tag that triggered the workflow
          name: CLI Release ${{ github.ref_name }} # Name of the release
          draft: false # Create a published release
          prerelease: true # Keep as pre-release for testing if desired
          fail_on_unmatched_files: true # Fail if assets aren't found
          files: |
            cli-rust/target/flamedeck-upload-linux-x64
            cli-rust/target/flamedeck-upload-macos-x64
            cli-rust/target/flamedeck-upload-macos-arm64
            cli-rust/target/flamedeck-upload-win-x64.exe 